<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sort | 其实很简单]]></title>
  <link href="http://ywllx.github.com/blog/categories/sort/atom.xml" rel="self"/>
  <link href="http://ywllx.github.com/"/>
  <updated>2013-08-01T00:21:57+08:00</updated>
  <id>http://ywllx.github.com/</id>
  <author>
    <name><![CDATA[Fred Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入比较排序算法]]></title>
    <link href="http://ywllx.github.com/blog/2013/07/30/sort-algorithms-part2/"/>
    <updated>2013-07-30T00:09:00+08:00</updated>
    <id>http://ywllx.github.com/blog/2013/07/30/sort-algorithms-part2</id>
    <content type="html"><![CDATA[<p>上篇博客介绍了四种比较排序算法的基本内容，这次就那四种排序算法扩展开，介绍一些有意思的内容，首先我们将简单证明下比较排序算法的下界为O(nlogn)。也许你很奇怪，为什么我在这里一直强调比较排序算法，其实我在这里需要指出的这里我们介绍的排序算法都是利用比较信息来对数组排序的，并没有对数组有特殊要求，因此并没有利用数组的其它信息来进行排序，它所能达到的最快时间复杂度就是O(nlogn),如果我们对数组有了特殊要求，就有可能突破这个时间复杂度限制，例如计数排序算法。</p>

<!--more-->


<hr />

<h4>比较排序算法下界</h4>

<p>比较排序可以被抽象为一颗决策树。决策树是一颗完全二叉树，它可以表示在给定输入规模的情况下，某一种特定排序算法对所有元素的比较情况。下图演示了插入排序算法作用于包含三个元素的输入序列的决策树情况。
<img src=/images/decision-tree.jpeg title="decision tree"><br/>
在决策树种，每个内部节点都以 i:j标记，其中i 和j满足 1 &lt;= i, j &lt;= n，n 是输入序列的元素的个数。每个叶节点都标注一个序列。排序算法的执行则是对应于一条从树的根节点到叶节点的路径。每个内节点都表示是一次比较。因为任何正确的排序算法都能够生成输入的一个正确排序，所以对于一个正确的比较输入排序来说，n个元素的n!中可能的排列都应该出现在决策树的叶节点上，而且每一个叶节点都必须是可以从根节点由某条路径出发到达的，该路径对应于实际排序的一次执行过程。<br/>
在决策树中，从根节点到任意一个可达叶节点的之间最长简单路径的长度，表示的是对应排序算法的最坏情况下的实际复杂度。因此，一个比较排序算法中的最坏情况比较次数就等于其决策树的高度。同时，当决策树中的每种排列都是以可达的叶节点形式出现时，该决策树下界也就是比较排序算法运行时间的下界。如果这颗决策二叉树就是高度平衡的，深度至少是log(n!)。又因为log(n!)的增长速度与nlogn相同，即log(n!)=O(nlogn) ，这就是通用排序算法的最低时间复杂度O(nlogn)的依据。</p>

<hr />

<h4>选择排序与归并排序合并</h4>

<p>虽然归并排序的最坏运行情况时间复杂度为O(nlogn)，选择排序的最差的时间复杂度为O(n2)，但是插入排序的常量因子可以使得它在n比较小的时候，在许多机器上运行时间更快。因此当归并排序的子问题变得足够小时，此时采用插入排序进行排序是想当有意义的。使用插入排序来排序n/k个为长度为k的子数组，然后对使用合并排序对这些子数组进行合并。我们可以插入排序可以在O(nk)时间内排序每个长度为k的n/k的子数组，最坏情况下可在O(nlg(n/k))时间内合并这些子表，修改后的排序算法的时间复杂度为O(nk + nlg(n/k))。</p>

<hr />

<h4>逆序对问题</h4>

<p>假设对于数组A[1…n]是一个n个不同数的数组。若对于i&lt;j，有A[i]>A[j]，则对偶(i, j)则称为数组A的一个逆序对。实际上修改插入排序算法和归并排序算法都可以求出数组A逆序对的数目。
如果我们采用合并排序思想来找逆序对。因为在合并排序的 Merge过程中，A[p...q] 和A[q+1...r]已经有序，假设此时已经Merge到A[s...q]和A[q+1...r]。考虑接下来的一步：若从前者取出A[s],说明A[s]比后面的序列A[t...q]中的元素都小，不存在逆序对；若从后者取出A[t]，则说明A[t]比前面的序列A[s...r]都小，即以t结尾的逆序对的数量为前者的剩余序列A[s...r]中元素的数量。</p>

<hr />

<h4>堆排序与优先队列</h4>

<p>堆的一个常见的应用为实现优先级队列；同堆一样，优先级队列也有两种：最大优先级队列和最小优先级队列。以最大优先级队列为例，优先级队列基本操作主要有：返回最大元素、删除并返回最大元素、提高元素优先级、插入给定值。下面分别简单介绍其伪代码。
返回最大值伪代码：
```c
heap-maximum(A)</p>

<pre><code>return A[1]
</code></pre>

<p><code>
删除并返回最大值伪代码，时间复杂度为O(logn)：
</code>c
heap-extract-max(A)</p>

<pre><code>if heap-size[A]&lt;1
    then error “heap underflow”
max = A[1]
A[1] = A[A.heap-size]
A.heap-size = A.heap-size - 1
max-heapify(A, 1)
return max
</code></pre>

<p>```</p>

<p>提高元素优先级伪代码，时间复杂度为O(logn)：
```c
heap-increase-key(A, i, key)</p>

<pre><code>if key &lt; A[i]
    then error “connot increase”
A[i] = key
while i&gt;1 and A[parent(i)]&lt;A[i]
    swap(A[i], A[PARENT(i)]
    i = parent(i)
</code></pre>

<p>```</p>

<p>插入过程伪代码，时间复杂度为堆的高度为 lgn，所以时间复杂读为 Ο(logn)：
```c
max-heap-insert(A, key)</p>

<pre><code>A.heap-size = A.heap-size + 1
A[A.heap-size] = -MAX
heap-increase-key(A, A.heap-size, key)
</code></pre>

<p>```</p>

<hr />

<h4>堆排序与 Young氏矩阵</h4>

<p>首先介绍一下Young矩阵这个数据结构的定义：它表示有这样的一个mXn的矩阵Y，有一数组a[k], 其中k&lt;=mXn，然后把a[k]中的数填入mXn的矩阵中，填充规则为：<br/>
1.每一行每一列都严格单调递增 (有其他的版本是递减，其原理相同)。<br/>
2.如果将a[k]中的数填完后，矩阵中仍有空间，则填入无穷大。<br/>
这个矩阵便称作Young矩阵，它用堆的数据结构表现为矩阵的某个元素Y[x, y]，它下面和右面的两个元素Y[x, y+1] ,Y[x+1, y]均比Y[x, y]要大。因此对于其的插入，删除等操作我们可以借助堆的思想。</p>

<h4>快速排序的优化</h4>

<p>快速排序的平均时间复杂度为O(nlogn)，我们的前提假设是：输入数据的所有排列是随机的，也就是对于每次划分的能做到基本平衡的划分。如何保证呢？一种方法是我们生成随机数来选择主元，另一种改进的随机方法称作三数取中划分（不是简单随机选取主元），从子数组中随机选择三个元素，选取其中数作为主元，另外如果对于一个数组中如果有大量相同的元素，那么使用快速排序对其进行划分时，也许我们需要采取更加细致的划分，比如对于主元值为x，可以使数组A划分为三段A[q…t]中所有的元素等于x，A[p…q-1]中所有的元素都小于x，对于A[t+1…r]中所有的元素都大于x，以此改进快速排序效率。最后同样对于当快速排序划分的子数组较小时，我们不再采用快速排序，而采用效率更高的插入排序算法。如果想更详细了解这些内容，可参考<a href="http://blogread.cn/it/article/612?f=sr">这篇博客</a></p>

<hr />

<p>对那些常用的比较排序算法就介绍这里，到这才发现原来我们原本学习的那些基本东西可以引申出如此多的内容，也顿时觉得自己真的大学没有好好学，现在处在这种境界，真是得怪自己啊，唉，好好学习，天天向上吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比较排序算法基本简介]]></title>
    <link href="http://ywllx.github.com/blog/2013/07/29/sort-algorithms-part1/"/>
    <updated>2013-07-29T22:48:00+08:00</updated>
    <id>http://ywllx.github.com/blog/2013/07/29/sort-algorithms-part1</id>
    <content type="html"><![CDATA[<p>这篇博客和下篇博客主要就排序问题做个简单的总结，任何学习计算机的同学都知道，排序问题在计算机科学里面是研究的最广泛的一个问题，也是在计算机科学里应用最广泛的一个问题。这篇博客先简单介绍几种最基本的比较排序算法的基本内容，下篇博客则就这些内容做一些有意思的深入，需要指出的这两篇博客所有的内容都是参考算法导论这本书的内容来的。</p>

<!--more-->


<hr />

<p>对于一个数组 A[1…n]，A 中元素的数目 n用A.length 表示，我们定义一个排序问题：<br/>
输入： n个数的一个序列(A[1], A[2], ..., A[n])。<br/>
输出：输入序列的一个排序 (A’[1], A’[2], …, A’[n]) ，满足((A’[1] &lt; A’[2] &lt; … &lt; A’[n])<br>
我们把用来排序的数字成为关键值。</p>

<hr />

<h4>插入排序</h4>

<p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n2)(n的2次方，后面类似）。是稳定的排序方法，伪代码如下：
```c
insert-sort</p>

<pre><code>for j = 2 to A.length
    key = A[j]
    i = j – 1
    while i &gt; 0 and A[i] &gt; key
        A[i + 1] = A[i]
        i = i – 1
    A[i + 1] = key
</code></pre>

<p>```
插入排序的最好情况是输入数组已经排好序，时间复杂度为 O(n)，最坏情况为数组已经反向排好序，此时时间复杂度为 O(n2)，平均时间复杂度度为O(n2)。</p>

<hr />

<h4>归并排序</h4>

<p>归并排序的关键操作是合并两个已排序的序列，我们需要调用一个辅助过程 merger(A, p, q, r)来完成合并，p, q, r分别为数组的下标，假设满足 p &lt;= q &lt; r，执行合并步骤时，假设 A[p…q] 和 A[q+1…r] 已经排好序。它将合并这两个子数组为一个排好序的数组 A[p…r]。合并步骤的伪代码如下：
```c
merger(A, p, q, r)</p>

<pre><code>n1 = q – p + 1
n2 = r – q
define new arrays L[1…n1] and R[1…n2]
for i = 1 to n1
    L[i] = A[p + I – 1]
for j = 1 to n2
    R[j[ = A[q + j]
L[n1 + 1] = MAX
    R[n2 + 1] = MAX
i = 1
j = 1
for k = p to r:
    if L[i] &lt; R [j]:
        A[k] = L[i]
        i = i + 1
    else
        A[k] = R[j]
        j = j + 1
</code></pre>

<p><code>
排序算法完整的伪代码如下：
</code>c
merger-sort(A, p, r)</p>

<pre><code>if p &lt; r
    q = (p + r)/2 // 取小于(p + r)/2的最大整数
    merger-sort(A, p, q)
    merger-sort(A, q+1, r)
    merger(A, p, q, r)
</code></pre>

<p>```
归并排序的最坏，平均时间复杂度均为 O(nlogn)，但是空间复杂度达到了 O(n)。</p>

<hr />

<h4>堆排序</h4>

<p>此处我们用到的为二叉堆。假设我们的堆是存储在数组A中的，那么A.length表示数组中元素的个数，那么A.heap-size则表示有多少个堆元素存储在此数组中。也就是说，虽然A中存满了数据，但是有可能只有 A[1…A.heap-size]存储的是堆的有效元素，这里0 &lt;= A.heap-size &lt;= A.length。堆的根节点为A[1]，这样给的一个节点的下标，我们很容易计算他的父节点，左孩子和右孩子。
```c
parent(i)</p>

<pre><code>return i/2 // 取小于(p + r)/2的最大整数
</code></pre>

<p>left(i)</p>

<pre><code>return 2i
</code></pre>

<p>right(i)</p>

<pre><code>return 2i + 1
</code></pre>

<p><code>
二叉堆可以分为两种形式：最大堆和最小堆，在这两种堆中，节点的值都要满足堆的性质，在最大堆中，最大堆性质是指除了根节点以为的所有节点，必须满足：
</code>c
A[parent(i)] >= A[i]
<code>
在最小堆中，最小堆性质是指除了根节点以为的所有节点，必须满足：
</code>c
A[parent(i)] &lt;= A[i]
<code>
堆排序主要包含以下两个基本过程，一是max-heapify过程：它用来维护最大堆的性质，其实际复杂度为 O(logn)。二是build-max-heap 过程：它主要是从无序的输入数组中构造一个最大堆，具有线性时间复杂度。首先介绍max-heapify 过程，它的输入为一个数组 A和数组下标i ，使用max-heapify过程的时候，我们假定根节点为left[i]和right[i]的二叉树都已经为最大堆了，若此时A[i]有可能小于其孩子节点，这样就违背了最大堆的性质。max-heapify过程通过让A[i]逐级下降，从而使下标i为根节点的子树遵循最大堆的性质。其伪代码如下：
</code>c
max-heapify(A, i)</p>

<pre><code>while 2*i &lt;= A.heap-szie
    l = left(i)
    r = right(i)
    if l &lt;= A.heap-szie and A[l] &gt; A[i]
        largest = l
    else
        largest = i
    if r &lt;= A.heap-szie and A[r] &gt; A[i]
        largest = r
    if largest != i
        swap (A[i], A[largest])
        i = largest
    else
        break
</code></pre>

<p><code>
我们可以用自底向上的方法利用max-heapify把一个大小为n=A.length的数组A[1…n]转换为最大堆。对于数组A，我们可以知道A((n/2)+1…n)中的元素都为此二叉树的叶节点。每个元素都可以看成只包含一个元素的堆。build-max-heap过程则对树中的其它节点都调用一次max-heapify。
</code>c
build-max-heap(A)</p>

<pre><code>A.heap-size = A.length
for i = A.length/2 downto 1
    max-heapify(A, i)
</code></pre>

<p><code>
初始时候，堆排序算法利用build-max-heap将输入数组A建成最大堆，其中n=A.length。因为数组中的最大元素总在根节点A[1]中，通过它与A[n]进行交换，便可将此元素放到正确的位置。如此我们可得堆排序的算法伪代码如下：
</code>c
heap-sort(A)</p>

<pre><code>build-max-heap(A)
for i = A.length downto 2
    swap(A[1], A[n])
    A.heap-size = A.heap-size - 1
    max-heapify(A, 1)
</code></pre>

<p>```</p>

<hr />

<h4>快速排序</h4>

<p>与归并排序一样，快速排序也使用了分治思想。算法的关键部分是下面的partition过程，如下面的伪代码所示，它将数组A[p…r]分为两个(可能为空)子数组A[p…q-1] 和A[q+1…r]，使得A[p…q-1]中的每一个元素都小于等于A[q]，使得A[q+1…r]中的每一个元素都大于或等于A[q]。partition的伪代码如下：
```c
partition(A, p, r)</p>

<pre><code>x = A[r]
i = p – 1
for j = p to r – 1
    if A[j] &lt;= x
        i = i + 1
        swap(A[i], A[j])
swap(A[i+1], A[r])
return i + 1
</code></pre>

<p><code>
下图展示了partition过程如何在一个有8个元素的数组的进行操作的过程，它总是选择一个元素x=A[r]作为主元，并围绕它来划分数组，如下图所示，(1)代表最初的数组，(2)代表partition过程j执行到第6个元素处时数组的形状。(3)代表这一次partition过程执行完成之后数组的状态。从这个partition过程很容易看出，在整个执行的过程中，partition维护了四个区域，A[p…i]区间里的所有值都小于或者等于x，A[i+1…j-1]区间里所有的值都大于x，A[r]=x，而区间A[j…r-1]中的值则还未进行划分。而快速排序partition过此执行完成之后，整个数组A以主元A[r]分成两部分，区间A[p…q-1]所有的元素小于或者等于A[r], 区间A[q+1…r]所有的元素大于A[r]。&lt;br/&gt;
&lt;img src=/images/quick-sort.jpg title="quick-sort"&gt;&lt;br/&gt;
整个快速排序算法的伪代码如下所示 ,快速排序的时间复杂度依赖于划分是否平衡，如果划分不平衡，例如按照上面的partition过程，如果对于有序的数组，时间复杂度就最差，为O(n2)，如果划分比较平衡的话，时间复杂度就为O(nlogn)，快速排序的平均时间复杂度也为O(nlogn)：
</code>c
quick-sort(A, p, r)</p>

<pre><code>if p &lt; r
    q = partition(A, p, r)
    quick-sort(A, p, q-1)
    quick-sort(A, q+1, r)
</code></pre>

<p>```</p>

<hr />

<p>至此介绍了四种排序算法最基本的内容，排序算法还有一个稳定性问题，可参考<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">这里</a>。上面的排序算法，选择和合并排序是稳定的，堆排序和快速排序不稳定。在实际应用中，当需要涉及到排序算法时，也许应用不仅仅是简单套用这些基本的内容那么简单，下篇将基于这些排序算法深入介绍一些有意思的内容。</p>
]]></content>
  </entry>
  
</feed>
