<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | 其实很简单]]></title>
  <link href="http://ywllx.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://ywllx.github.com/"/>
  <updated>2014-08-05T04:37:35-07:00</updated>
  <id>http://ywllx.github.com/</id>
  <author>
    <name><![CDATA[Fred Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python文本处理]]></title>
    <link href="http://ywllx.github.com/blog/2013/06/28/python-text-processing/"/>
    <updated>2013-06-28T11:45:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/06/28/python-text-processing</id>
    <content type="html"><![CDATA[<p>对于脚本语言来说，文本处理任务构成了一个很重要的组成部分。python提供用于文本处理最主要的工具就是字符串——不可改变的字符序列。python提供了很多基于字符串的基本处理方法，掌握这些方法对于处理文本是十分用于的，这里不再详述。我这里主要是总结《python cookbook》中关于文本处理的几个例子一些内容形成的一个博客。</p>

<!--more-->


<hr />

<h4>每次处理一个字符</h4>

<p>在例子1中，文章提到了如何处理字符串中每个字符的四种基本方法。python实际上并没有一个特别的类型来对应“字符”以区别字符串,要做到每次处理一个字符的方式处理字符串。可以调用内建的<code>list</code>，用字符串作为参数：
<code>python
thelist = list(thestring)
</code>
或者用<code>for</code>语句对该字符串进行循环遍历：
```python
for c in thestring:</p>

<pre><code>do_something_with(c)
</code></pre>

<p><code>
上面可以换成以下用法：
</code>python
results = [do_something_with(c) for c in thestring]
<code>
或者用内建的`map`函数，每次取得一个字符就调用一次处理函数：
</code>python
results = map(do_something, thestring]
```</p>

<hr />

<h4>测试一个对象是否为字符串</h4>

<p>在python cookbook中提到，许多程序员遇到这个问题的第一反应是采用如下方法：
```python
def isExactlyAString(obj):</p>

<pre><code>return type(obj) is type('')
</code></pre>

<p><code>
书中说到这个方法不太好，很多Unicode对象无法通过这个测试，用户自己编写的str的子类也不行，我尝试了下，发现中文字符串还是可以通过这个测试的。书中提到的首先的解决方案是采用如下方法：
</code>python
def isAstring(obj):</p>

<pre><code>return isinstance(obj, basestring)
</code></pre>

<p><code>
但书中接着提到这个方案也有不足，对于python标准库中提到的UserString的模块提供的UserString实例也无能为力，因为它不是从basestring派生的。想检查一个对象行为是否真的像字符串那样，可以采取如下方法：
</code>python
def isStringLike(obj):</p>

<pre><code>try: obj + ''
excpet: return False
else: return true
</code></pre>

<p>```
它实用于str，unicode和Usertring，但是比较复杂而且运行比较慢。
这个方法仍有可能不满足的地方，如是作者提到了一个所谓的鸭子判断法：如果它走路像鸭子，而且叫声也像鸭子，那么对于我们的应用而言，便可以认为这个东西就是鸭子。这个方法蛮有意思的，倒有点像做测试，如果我所列出的一大堆测试都过了，那么便可以认为这个程序基本就正确了，可以用了，当然很有可能它还有我们没发现的bug。</p>

<hr />

<h4>合并字符串</h4>

<p>python中如果要把一些小的字符串合并成一个大的字符串，可以使用字符串操作符join，当然我们也可以使用'+'操作符也能够将字符串拼接起来，假如pieces是一个字符串列表，那么可以使用以上两种方式进行拼接。
在python中，字符串对象是无法改变的。任何对字符串的操作，包括字符串的拼接，都将产生一个新的字符串对象，而不是修改原有的对象。因此拼接N个字符串将涉及到创建并丢弃N-1个中间结果。当一个序列中包含了很多小的字符串的时候，性能就不得不考虑。在内部使用了 + 或者 += 的循环所需的时间跟需要累加的字符数的平方成正比，因为分配并填充一个大字符串的时间大致正比如该字符串的长度。但是如果我们使用join方法，传入一个字符串序列作为参数，它将返回一个由字符串序列所有子项字符串拼接而成的大字符串，而且这个过程只使用了一个拷贝用于串接所有子项，性能将会得到大大提高。下面是两种实现方法一个简单测试例子，最后执行时间可以看出两者性能差距是很大的。
```python
#!/usr/bin/env python</p>

<p>def test1(pieces):</p>

<pre><code>largeString = ''
for piece in pieces:
    largeString += piece
</code></pre>

<p>def test2(pieces):</p>

<pre><code>largeString = ''.join(pieces)
</code></pre>

<p>strings1 = [ str(item) for item in xrange(100) ]
strings2 = [ str(item) for item in xrange(200) ]</p>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>from timeit import Timer
t1=Timer("test1(strings1)", "from __main__ import test1, strings1")
t2=Timer("test2(strings1)", "from __main__ import test2, strings1")
t3=Timer("test1(strings2)", "from __main__ import test1, strings2")
t4=Timer("test2(strings2)", "from __main__ import test2, strings2")
print t1.timeit()
print t2.timeit()
print t3.timeit()
print t4.timeit()
</code></pre>

<p>```
上述代码在ubnutu 12.10, python 2.7, CPU为Intel Core P8700环境下执行结果如下：<br/>
8.47422218323<br/>
2.06159615517<br/>
18.8844971657<br/>
4.24623513222<br/></p>

<hr />

<h4>过滤字符串</h4>

<p>给定一个需要保留的字符的集合，构建一个过滤函数，并可将其应用于任何字符串s，函数返回一个s的拷贝，该拷贝只包含指定字符集合中的元素，对于此类问题，不得不提到string对象的下面两个方法：
string.maketrans(from, to)：Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.</p>

<p>string.translate(s, table[, deletechars])：Delete all characters from s that are in deletechars (if present), and then translate the characters using table, which must be a 256-character string giving the translation for each character value, indexed by its ordinal. If table is None, then only the character deletion step is performed.</p>

<p>当以string.maketrans('', '')方法调用maketrans时，翻译表正好是有256个字符的字符串t。翻译表生成的字符串（忽略不可打印字符）为“!"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~”，本质上与ASCII表相对应.</p>
<p>其实调用maketrans函数时，已经完成了转换。例如string.maketrans('ABCD', 'abcd'),调用完成后，翻译表生成的包含256个字符的字符串（忽略不可打印字符）为“!"#$%&'()*+,-./0123456789:;<=>?@abcdEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~”，该翻译表中的原“ABCD”的位置已被“abcd”替换。</p>
当你把t作为第一个参数传入translate方法时，原字符串中的每一个字符c，在处理完成后都会被翻译成字符t[ord(c)]
而对于translate()简单来说,就是对字符串S移除deletechars包含的字符，然后保留下来的字符按照table里面的字符映射关系映射,这个table必须是a 256-character string giving the translation for each character value, indexed by its ordinal. 这个table正好可以用上面提到的maketrans()生成。
举个例子也许更有说服力：
```python
#!/usr/bin/env python
import string
table1 = string.maketrans('', '') 
table2 = string.maketrans('abcde', 'ABCDE')
print table1
print table2

s = 'abcdef-123456'
s1 = s.translate(table1)
s2 = s.translate(table2)
s3 = s.translate(table1, 'abc123')
s4 = s.translate(table2, 'abc123')

print s1
print s2
print s3
print s4
```
---
table1与table2不同的地方就在于翻译表中的原“abcde”的位置已被“ABCDE”替换；<br/>
s1,s2,s3,s4打印如下：<br/>
abcdef-123456<br/>
ABCDEf-123456<br/>
def-456<br/>
DEf-456<br/>
s1 = s.translate(table1)           #没做任何变化，输出原字符串<br/>
s2 = s.translate(table2)           #输出ABCDEf-123456 就是将abcd映射为大写的ABCD<br/>
s3 = s.translate(table1, 'abc123') #输出def-456， 则是删除了s中的字符abc123<br/>
s4 = s.translate(table2, 'abc123') #先把s中的abc123去除了，然后在保留下来的字符中应用table中指定的字符映射关系映射：de -> DE<br/>
还有此方法在python3中好像有变动，具体参考相关python文档了。<br/>

]]></content>
  </entry>
  
</feed>
