<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[其实很简单]]></title>
  <link href="http://ywllx.github.com/atom.xml" rel="self"/>
  <link href="http://ywllx.github.com/"/>
  <updated>2014-08-05T03:29:47-07:00</updated>
  <id>http://ywllx.github.com/</id>
  <author>
    <name><![CDATA[Fred Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Liunx CPU 性能分析]]></title>
    <link href="http://ywllx.github.com/blog/2014/08/04/linux-cpu-performance/"/>
    <updated>2014-08-04T18:07:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2014/08/04/linux-cpu-performance</id>
    <content type="html"><![CDATA[<hr />

<p>含泪星光 打亮了旧的记忆 我们还会相遇 一定有原因 滚烫星光 就像埋藏的真心 只为一个人狂热 烧红了梦境 把漆黑忘记。</p>


<p>许久没回到这个博客了，哎，注定是个一事无成的人啊，今天再次回到这里，希望以后常更新，能够坚持下去。这篇博客主要在Linux对CPU性能进行监控和分析</P>


<!--more-->


<hr />

<h4>CPU Load(负载) vs utilization(利用率)</h4>

<p>前一段时间做监控时，发现window系统下CPU负载和CPU利用率有数值相差很大，而且在一个linux负载很低的集群上启动一个作业时，发现CPU利用率很快到了90%，而监控到的负载此时却仍然很低。因此觉得两者有很大不同</p>


<p>在Linux/Unix下，CPU利用率（CPU utilization）分为用户态，系统态和空闲态，分别表示CPU处于用户态执行的时间，系统内核执行的时间，和空闲系统进程执行的时间。平时所说的CPU利用率是指：CPU执行非系统空闲进程的时间 / CPU总的执行时间。在Linux的内核中，有一个全局变量：Jiffies。 Jiffies代表时间。它的单位随硬件平台的不同而不同，系统里定义了一个常数HZ&#8212;-代表每秒种最小时间间隔的数目。这样jiffies的单位就是1/HZ。Intel平台jiffies的单位是1/100秒，这就是系统所能分辨的最小时间间隔了。每个CPU时间片，Jiffies都要加1。 CPU的利用率就是用执行用户态+系统态的Jiffies除以总的Jifffies来表示。</p>


<p>CPU负载取决于CPU进程队列长度而不是CPU利用率。什么决定了CPU进程队列长度？它包括计算处于一种running或者runable(waiting for CPU)以及一些进程处于uninterruptable sleep states(usually waiting for disk activity),具体见本节末wiki参考</p>


<p>它们之间有什么不同呢？主要反映在两方面，<a href="http://www.linuxjournal.com/article/9001?page=0,0">这篇文章</a>(它对CPU负载和利用率也做了更加详细的解释)这段话解释得很清楚：The load averages differ from CPU percentage in two significant ways: 1) load averages measure the trend in CPU utilization not only an instantaneous snapshot, as does percentage, and 2) load averages include all demand for the CPU not only how much was active at the time of measurement.</p></p>

<p>关于CPU负载和利用率的解释和说明，主要参考了[这篇文章](http://blog.csdn.net/longerzone/article/details/8631183)和[wiki](http://en.wikipedia.org/wiki/Load_%28computing%29),也许大家看看这三篇引用文献，会比我的简单介绍了解得更深刻。</p>


<hr />

<h4>top</h4>

<p>top命令是查看linux系统性能最常使用的工具之一，可以可以动态观察系统进程状况，方便系统管理员实时了解系统资源现状。这里重点解释下CPU性能相关命令，在终端输入top命令之后，第一行显示的up表示系统运行时间，users表示当前登陆用户数，load average表示系统负载，上节已做解释。此时我们按下1，如果是多核CPU，会看到每个核的使用情况如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">top</span> <span class="o">-</span> <span class="mo">02</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="mi">48</span> <span class="n">up</span> <span class="mi">94</span> <span class="n">days</span><span class="p">,</span> <span class="mi">12</span><span class="o">:</span><span class="mi">15</span><span class="p">,</span>  <span class="mi">1</span> <span class="n">user</span><span class="p">,</span>  <span class="n">load</span> <span class="n">average</span><span class="o">:</span> <span class="mf">0.31</span><span class="p">,</span> <span class="mf">0.29</span><span class="p">,</span> <span class="mf">0.24</span>
</span><span class='line'><span class="nl">Tasks:</span> <span class="mi">173</span> <span class="n">total</span><span class="p">,</span>   <span class="mi">1</span> <span class="n">running</span><span class="p">,</span> <span class="mi">172</span> <span class="n">sleeping</span><span class="p">,</span>   <span class="mi">0</span> <span class="n">stopped</span><span class="p">,</span>   <span class="mi">0</span> <span class="n">zombie</span>
</span><span class='line'><span class="n">Cpu0</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu1</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu2</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu3</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu4</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.3</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span> <span class="mf">99.7</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu5</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu6</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span><span class='line'><span class="n">Cpu7</span>  <span class="o">:</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">us</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">sy</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">ni</span><span class="p">,</span><span class="mf">100.0</span><span class="o">%</span><span class="n">id</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">wa</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">hi</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">si</span><span class="p">,</span>  <span class="mf">0.0</span><span class="o">%</span><span class="n">st</span>
</span></code></pre></td></tr></table></div></figure>


<p>
关于以上各列的意义，具体解释如下：
* <strong>us</strong>: This shows the cpu workload caused by processes run by normal users. In Other words these are load caused by applications.
* <strong>sy</strong>: This indicates load created by the system. Means these are things most of the times executed by the Linux kernel. This normally stays low, but becomes a little high for certain tasks where kernel is involved.
* <strong>ni</strong>: This refers to the number of processes that are running with a modified nice value. If you are new to nice values then refer the below <a href="http://www.slashroot.in/nice-and-renice-command-usage-examples-process-priority-linux">article</a>.
* <strong>id</strong>: This indicates the amount of time spent by CPU doing nothing. A higher id value means CPU is idle most of the times
* <strong>wa</strong>: The amount of time, your cpu is waiting for I/O operations to complete.
* <strong>ha</strong>: This refers to hardware interrupts. This becomes high when you have a higher disk usage, or higher network usage etc.
* <strong>si</strong>: These are interrupts created by software. These values stay very low normally.
* <strong>st</strong>: This relates to virtual machines running on your system. When virtual machines need CPU, then normally take it from the host machine. If you have too many virtual machines running on your server and you have this st value higher, its good to tear down a few virtual hosts.
其中一个CPU有关的交互命令P：根据CPU使用百分比大小对进程进行排序。
关于top这个工具功能更多的介绍和用法我们可以参考<a href="http://my.oschina.net/leejun2005/blog/157910">linux系统监控、诊断工具之top详解</a>和<a href="http://os.51cto.com/art/201005/200652_all.htm">Linux系统监控工具之top详解</a>这两篇文章。
我们知道CPU负载(load average)反映了运行队列的某段时间平均长度，那么我们如何检测系统现有运行队列呢。一个进程进入到运行队列，可能处于runnable或者blocked状态,注意CPU负载反映的运行队列的长度（无论其中的进程处于runnable或者blocked状态）。vmstat工具便可以检测运行队列的状态。</p>

<hr />

<h4>vmstat</h4>

<p>vmstat命令是最常见的Linux/Unix监控工具，可以展现给定时间间隔的服务器的状态值,包括服务器的CPU使用率，内存使用，虚拟内存交换情况,IO读写情况。vmstat工具的使用是通过两个数字参数来完成的，第一个参数是采样的时间间隔数，单位是秒，第二个参数是采样的次数。如果不输入第二个参数，则会一直采集监控的数据。具体如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">vmstat</span> <span class="mi">2</span>
</span><span class='line'><span class="n">procs</span> <span class="o">-----------</span><span class="n">memory</span><span class="o">----------</span> <span class="o">---</span><span class="n">swap</span><span class="o">--</span> <span class="o">-----</span><span class="n">io</span><span class="o">----</span> <span class="o">-</span><span class="n">system</span><span class="o">--</span> <span class="o">------</span><span class="n">cpu</span><span class="o">-----</span>
</span><span class='line'> <span class="n">r</span>  <span class="n">b</span>   <span class="n">swpd</span>   <span class="n">free</span>   <span class="n">buff</span>  <span class="n">cache</span>   <span class="n">si</span>   <span class="n">so</span>    <span class="n">bi</span>    <span class="n">bo</span>   <span class="n">in</span>   <span class="n">cs</span> <span class="n">us</span> <span class="n">sy</span> <span class="n">id</span> <span class="n">wa</span> <span class="n">st</span>
</span><span class='line'> <span class="mi">1</span>  <span class="mi">0</span>      <span class="mi">0</span> <span class="mi">803408</span>  <span class="mi">19252</span>  <span class="mi">77080</span>    <span class="mi">0</span>    <span class="mi">0</span>     <span class="mi">2</span>     <span class="mi">2</span>   <span class="mi">16</span>   <span class="mi">24</span>  <span class="mi">0</span>  <span class="mi">0</span> <span class="mi">99</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'> <span class="mi">0</span>  <span class="mi">0</span>      <span class="mi">0</span> <span class="mi">803392</span>  <span class="mi">19252</span>  <span class="mi">77112</span>    <span class="mi">0</span>    <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>   <span class="mi">32</span>   <span class="mi">42</span>  <span class="mi">0</span>  <span class="mi">2</span> <span class="mi">97</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span><span class='line'> <span class="mi">0</span>  <span class="mi">0</span>      <span class="mi">0</span> <span class="mi">803392</span>  <span class="mi">19252</span>  <span class="mi">77112</span>    <span class="mi">0</span>    <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>   <span class="mi">26</span>   <span class="mi">36</span>  <span class="mi">0</span>  <span class="mi">0</span> <span class="mi">100</span>  <span class="mi">0</span>  <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中各个参数介绍如下，主要参考<a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/05/2312625.html">这篇文章</a>：
* <strong>r</strong>：表示运行队列(就是说多少个进程真的分配到CPU)，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。
* <strong>b</strong>：表示阻塞的进程
* <strong>swpd</strong>：虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。
* <strong>free</strong>：空闲的物理内存的大小。
* <strong>buff</strong>：Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存。
* <strong>cache</strong>： cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)
* <strong>si</strong>：每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。
* <strong>so</strong>：每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。
* <strong>bi</strong>：块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte。
* <strong>bo</strong>： 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。
* <strong>in</strong>： 每秒CPU的中断次数，包括时间中断
* <strong>cs</strong>： 每秒上下文切换次数，Context switching can happen for two reasons. First one is the genuine processor switches, guided by the kernel scheduler. Second one is due to interrupts caused by hard wares and other software applications. We will get back to interrupts in some time.例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。
* <strong>us</strong>：用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。
* <strong>sy</strong>：系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。
* <strong>id</strong>：空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。
* <strong>wt</strong>：等待IO CPU时间。</p>

<hr />

<h4>taskset</h4>

<p>现在我们使用的CPU一般都是多核的CPU，一般一个进程是可以在所有的CPU核上运行的，一般来说多核提高了程序性能，但是对于某些进程来说，when a process is switched from one core to another the new processor has to flush its cache. 这便会影响它的性能。因此我们可以使用taskset命令让进程运行在指定的CPU，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span><span class="n">taskset</span> <span class="o">-</span><span class="n">c</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span> <span class="o">-</span><span class="n">p</span> <span class="mi">6389</span>
</span></code></pre></td></tr></table></div></figure>


<p>将PID为6389的进行绑定到CPU 0,1上执行。</p>

<hr />

<h4>pidstat，mpstat，中断</h4>

<p>我们可以使用pidstat命令查看每个进程详细的资源使用情况，其中当我们使用
-w选项时，我们可以获得这个进程的 context switch详细情况，主要涉及到cswch/s，nvcswch/s，其中详细解释如下：
* <strong>cswch/s</strong>: Total number of voluntary context switches the task made per second.  A voluntary context switch occurs when a task blocks because it requires a resource that is unavailable.
* <strong>nvcswch/s</strong>: Total  number  of  non voluntary context switches the task made per second.  A involuntary context switch takes place when a task executes for the duration of its time slice and then is forced to relinquish the processor.</p>

<ul>
<li><strong>mpstat</strong>是MultiProcessor Statistics的缩写，是实时系统监控工具。其报告与CPU的一些统计信息，这些信息存放在/proc/stat文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。
-P {|ALL} 表示监控哪个CPU， cpu在[0,cpu个数-1]中取值
internal 相邻的两次采样的间隔时间
count 采样的次数，count只能和delay一起使用
当没有参数时，mpstat则显示系统启动以后所有信息的平均值。有interval时，第一行的信息自系统启动以来的平均信息。</li>
</ul>


<p>另外我们还可以通过cat /proc/interrupts获取CPU中断情况，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="n">interrupts</span> <span class="o">|</span><span class="n">grep</span> <span class="n">timer</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">:</span>         <span class="mi">57</span>          <span class="mi">0</span>   <span class="n">IO</span><span class="o">-</span><span class="n">APIC</span><span class="o">-</span><span class="n">edge</span>      <span class="n">timer</span>
</span><span class='line'> <span class="nl">LOC:</span>     <span class="mi">310653</span>     <span class="mi">473923</span>   <span class="n">Local</span> <span class="n">timer</span> <span class="n">interrupts</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个对于我们判断系统是否有高IO请求也是比较有用的。</p>

<hr />

<p>总之，针对以上的到的信息，一般而言：</p>

<ul>
<li><strong>当us很高而cs较低的时候，则可能是一个进程占用了较高的CPU时间</strong>（If the <strong>us</strong> column in vmstat goes too high in the output, without a similar level of context switches, then it is possible that a single process is using the processor for a substantially higher amount of time）</li>
<li><strong>wa较高，us高而cs比较低，则意味着系统是高IO导致高us。</strong>（If the  <strong>wa</strong> column also experiences a too high value at the same time (when <strong>us</strong> is higher and <strong>cs</strong> is substantially low ), that means the process that caused the  <strong>us</strong> value to stay high is doing some heavy i/o operation.）</li>
<li><strong>in较高而cs较低则可能是产生了较多的硬件请求</strong> （A case where you have higher number of interrupts (shown by <strong>in</strong> column in vmstat) and substantially lower number of context switches (shown by <strong>cs</strong>) can indicate that a particular application (which might be single threaded) is sending too many hardware requests.）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[送给我自己]]></title>
    <link href="http://ywllx.github.com/blog/2013/09/04/for-myself/"/>
    <updated>2013-09-04T10:09:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/09/04/for-myself</id>
    <content type="html"><![CDATA[<p>这是很久以前写的一篇文章了，当时标题就是送给我自己，发表在以前我的一个腾讯的空间里，查看了下时间是2007年9月份，而现在已是2013年的9月份，如今把他翻出来，不打算做任何改动，当作自己一种回忆吧。</p>


<p>前记：有意给自己写上一篇，想到了很多，却什么写不下来，然而，文字在瞬间形成。</P>


<!--more-->


<hr />

<h4>落花岂是无情物</h4>

<p>几个月前，大概是初夏刚到的时候，看着学校那淡绿的新嫩荷叶点缀在荷塘之中，心里想着：再等一段时间，等着荷花盛开时，一定来好好看看。</p>


<p>几天前，等我再次来到荷塘边，已是初秋时，荷花早已不见，而且好多的荷叶周边已开始变黄，心里想道：花儿为什么不等一段时间，等我看过了之后再谢呢？</p>


<hr />

<h4>红花未谢绿已黄</h4>

<p>从今天起，我突然觉得我不能再随便承诺别人。</p>


<p>以前以为只要自己多努力，还是很可能做到很多的。</p>


<p>现在才明白，承诺实现还与你承诺的人有关，也许现在因为她，你做不了了。更当承诺的内容与目的慢慢偏离的时候。也许因为她，你不能做了。</p>


<p></p>

<hr />

<h4>倒似无心却有心</h4>

<p>我的朋友！</p>


<p>当我计划着送你回去的时候，你说没有必要；</p>


<p>当我希望着接你回来的时候，你却早已返回；</P>


<p>当我期待着与你见面的时候，你从身边擦过。</p>


<p>唉，我的朋友，错过了？！</p>


<hr />

<h4>举杯忘愁愁更愁</h4>

<p>一个人深爱着另一个人，可是另一个个人却不爱那个人。</p>


<p>于是他来到了地狱。</p>


<p>下面的人问他：“你为什么来这里啊？” </p>


<p>“因为我听说在这有一样东西，可以让我忘掉记忆。” </p>


<p>“唉，可怜的人啊!其实你什么都不知道，不明白却来到了这里！” </p>


<hr />

<p>——昨天我写下：也许文字需要的不光是关怀，更需要知音。</p>


<p>——今早我在想：也许文字需要的不仅是知音，更需要关怀。</p>


<p>——而现在，我却在两者之间徘徊&#8230;&#8230;</P>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入比较排序算法]]></title>
    <link href="http://ywllx.github.com/blog/2013/07/30/sort-algorithms-part2/"/>
    <updated>2013-07-30T00:09:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/07/30/sort-algorithms-part2</id>
    <content type="html"><![CDATA[<p>上篇博客介绍了四种比较排序算法的基本内容，这次就那四种排序算法扩展开，介绍一些有意思的内容，首先我们将简单证明下比较排序算法的下界为O(nlogn)。也许你很奇怪，为什么我在这里一直强调比较排序算法，其实我在这里需要指出的这里我们介绍的排序算法都是利用比较信息来对数组排序的，并没有对数组有特殊要求，因此并没有利用数组的其它信息来进行排序，它所能达到的最快时间复杂度就是O(nlogn),如果我们对数组有了特殊要求，就有可能突破这个时间复杂度限制，例如计数排序算法。</p>

<!--more-->


<hr />

<h4>比较排序算法下界</h4>

<p>比较排序可以被抽象为一颗决策树。决策树是一颗完全二叉树，它可以表示在给定输入规模的情况下，某一种特定排序算法对所有元素的比较情况。下图演示了插入排序算法作用于包含三个元素的输入序列的决策树情况。
<img src=/images/decision-tree.jpeg title="decision tree"><br/>
在决策树种，每个内部节点都以 i:j标记，其中i 和j满足 1 &lt;= i, j &lt;= n，n 是输入序列的元素的个数。每个叶节点都标注一个序列。排序算法的执行则是对应于一条从树的根节点到叶节点的路径。每个内节点都表示是一次比较。因为任何正确的排序算法都能够生成输入的一个正确排序，所以对于一个正确的比较输入排序来说，n个元素的n!中可能的排列都应该出现在决策树的叶节点上，而且每一个叶节点都必须是可以从根节点由某条路径出发到达的，该路径对应于实际排序的一次执行过程。<br/>
在决策树中，从根节点到任意一个可达叶节点的之间最长简单路径的长度，表示的是对应排序算法的最坏情况下的实际复杂度。因此，一个比较排序算法中的最坏情况比较次数就等于其决策树的高度。同时，当决策树中的每种排列都是以可达的叶节点形式出现时，该决策树下界也就是比较排序算法运行时间的下界。如果这颗决策二叉树就是高度平衡的，深度至少是log(n!)。又因为log(n!)的增长速度与nlogn相同，即log(n!)=O(nlogn) ，这就是通用排序算法的最低时间复杂度O(nlogn)的依据。</p>

<hr />

<h4>选择排序与归并排序合并</h4>

<p>虽然归并排序的最坏运行情况时间复杂度为O(nlogn)，选择排序的最差的时间复杂度为O(n2)，但是插入排序的常量因子可以使得它在n比较小的时候，在许多机器上运行时间更快。因此当归并排序的子问题变得足够小时，此时采用插入排序进行排序是想当有意义的。使用插入排序来排序n/k个为长度为k的子数组，然后对使用合并排序对这些子数组进行合并。我们可以插入排序可以在O(nk)时间内排序每个长度为k的n/k的子数组，最坏情况下可在O(nlg(n/k))时间内合并这些子表，修改后的排序算法的时间复杂度为O(nk + nlg(n/k))。</p>

<hr />

<h4>逆序对问题</h4>

<p>假设对于数组A[1…n]是一个n个不同数的数组。若对于i&lt;j，有A[i]>A[j]，则对偶(i, j)则称为数组A的一个逆序对。实际上修改插入排序算法和归并排序算法都可以求出数组A逆序对的数目。
如果我们采用合并排序思想来找逆序对。因为在合并排序的 Merge过程中，A[p&#8230;q] 和A[q+1&#8230;r]已经有序，假设此时已经Merge到A[s&#8230;q]和A[q+1&#8230;r]。考虑接下来的一步：若从前者取出A[s],说明A[s]比后面的序列A[t&#8230;q]中的元素都小，不存在逆序对；若从后者取出A[t]，则说明A[t]比前面的序列A[s&#8230;r]都小，即以t结尾的逆序对的数量为前者的剩余序列A[s&#8230;r]中元素的数量。</p>

<hr />

<h4>堆排序与优先队列</h4>

<p>堆的一个常见的应用为实现优先级队列；同堆一样，优先级队列也有两种：最大优先级队列和最小优先级队列。以最大优先级队列为例，优先级队列基本操作主要有：返回最大元素、删除并返回最大元素、提高元素优先级、插入给定值。下面分别简单介绍其伪代码。
返回最大值伪代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">heap</span><span class="o">-</span><span class="n">maximum</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>删除并返回最大值伪代码，时间复杂度为O(logn)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">heap</span><span class="o">-</span><span class="n">extract</span><span class="o">-</span><span class="n">max</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">heap</span><span class="o">-</span><span class="n">size</span><span class="p">[</span><span class="n">A</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">then</span> <span class="n">error</span> <span class="err">“</span><span class="n">heap</span> <span class="n">underflow</span><span class="err">”</span>
</span><span class='line'>    <span class="n">max</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span><span class="p">]</span>
</span><span class='line'>    <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">max</span><span class="o">-</span><span class="n">heapify</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">max</span>
</span></code></pre></td></tr></table></div></figure>


<p>提高元素优先级伪代码，时间复杂度为O(logn)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">heap</span><span class="o">-</span><span class="n">increase</span><span class="o">-</span><span class="n">key</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      <span class="n">then</span> <span class="n">error</span> <span class="err">“</span><span class="n">connot</span> <span class="n">increase</span><span class="err">”</span>
</span><span class='line'>    <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span> <span class="n">and</span> <span class="n">A</span><span class="p">[</span><span class="n">parent</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span><span class="o">&lt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      <span class="n">swap</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">parent</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>插入过程伪代码，时间复杂度为堆的高度为 lgn，所以时间复杂读为 Ο(logn)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">max</span><span class="o">-</span><span class="n">heap</span><span class="o">-</span><span class="n">insert</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">A</span><span class="p">[</span><span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">MAX</span>
</span><span class='line'>  <span class="n">heap</span><span class="o">-</span><span class="n">increase</span><span class="o">-</span><span class="n">key</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>堆排序与 Young氏矩阵</h4>

<p>首先介绍一下Young矩阵这个数据结构的定义：它表示有这样的一个m X n的矩阵Y，有一数组a[k]，其中k&lt;=(m * n)，然后把a[k]中的数填入m X n的矩阵中，填充规则为：<br/>
1.  每一行每一列都严格单调递增 (有其他的版本是递减，其原理相同)。<br/>
2.  如果将a[k]中的数填完后，矩阵中仍有空间，则填入无穷大。<br/>
这个矩阵便称作Young矩阵，它用堆的数据结构表现为矩阵的某个元素Y[x, y]，它下面和右面的两个元素Y[x, y+1] ,Y[x+1, y]均比Y[x, y]要大。因此对于其的插入，删除等操作我们可以借助堆的思想。</p>

<hr />

<h4>快速排序的优化</h4>

<p>快速排序的平均时间复杂度为O(nlogn)，我们的前提假设是：输入数据的所有排列是随机的，也就是对于每次划分的能做到基本平衡的划分。如何保证呢？一种方法是我们生成随机数来选择主元，另一种改进的随机方法称作三数取中划分（不是简单随机选取主元），从子数组中随机选择三个元素，选取其中数作为主元，另外如果对于一个数组中如果有大量相同的元素，那么使用快速排序对其进行划分时，也许我们需要采取更加细致的划分算法，比如对于主元值为x，可以使数组A划分为三段A[q…t]中所有的元素等于x，A[p…q-1]中所有的元素都小于x，对于A[t+1…r]中所有的元素都大于x，以此改进快速排序效率。最后同样对于当快速排序划分的子数组较小时，我们不再采用快速排序，而采用效率更高的插入排序算法。如果想更详细了解这些内容，可参考<a href="http://blogread.cn/it/article/612?f=sr">这篇博客</a></p>

<hr />

<p>对那些常用的比较排序算法就介绍这里，到这才发现原来我们原本学习的那些基本东西可以引申出如此多的内容，也顿时觉得自己真的大学没有好好学，现在处在这种境界，真是得怪自己啊，唉，好好学习，天天向上吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比较排序算法基本简介]]></title>
    <link href="http://ywllx.github.com/blog/2013/07/29/sort-algorithms-part1/"/>
    <updated>2013-07-29T22:48:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/07/29/sort-algorithms-part1</id>
    <content type="html"><![CDATA[<p>这篇博客和下篇博客主要就排序问题做个简单的总结，任何学习计算机的同学都知道，排序问题在计算机科学里面是研究的最广泛的一个问题，也是在计算机科学里应用最广泛的一个问题。这篇博客先简单介绍几种最基本的比较排序算法的基本内容，下篇博客则就这些内容做一些有意思的深入，需要指出的这两篇博客所有的内容都是参考算法导论这本书的内容来的。</p>

<!--more-->


<hr />

<p>对于一个数组 A[1…n]，A 中元素的数目 n用A.length 表示，我们定义一个排序问题：<br/>
输入： n个数的一个序列(A[1], A[2], &#8230;, A[n])。<br/>
输出：输入序列的一个排序 (A’[1], A’[2], …, A’[n]) ，满足((A’[1] &lt; A’[2] &lt; … &lt; A’[n])<br>
我们把用来排序的数字成为关键值。</p>

<hr />

<h4>插入排序</h4>

<p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n2)(n的2次方，后面类似）。是稳定的排序方法，伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">insert</span><span class="o">-</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="n">to</span> <span class="n">A</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="err">–</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="n">and</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">key</span>
</span><span class='line'>          <span class="n">A</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="err">–</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">A</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>插入排序的最好情况是输入数组已经排好序，时间复杂度为 O(n)，最坏情况为数组已经反向排好序，此时时间复杂度为 O(n2)，平均时间复杂度度为O(n2)。</p>

<hr />

<h4>归并排序</h4>

<p>归并排序的关键操作是合并两个已排序的序列，我们需要调用一个辅助过程 merger(A, p, q, r)来完成合并，p, q, r分别为数组的下标，假设满足 p &lt;= q &lt; r，执行合并步骤时，假设 A[p…q] 和 A[q+1…r] 已经排好序。它将合并这两个子数组为一个排好序的数组 A[p…r]。合并步骤的伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">merger</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n1</span> <span class="o">=</span> <span class="n">q</span> <span class="err">–</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">n2</span> <span class="o">=</span> <span class="n">r</span> <span class="err">–</span> <span class="n">q</span>
</span><span class='line'>    <span class="n">define</span> <span class="n">new</span> <span class="n">arrays</span> <span class="n">L</span><span class="p">[</span><span class="mi">1</span><span class="err">…</span><span class="n">n1</span><span class="p">]</span> <span class="n">and</span> <span class="n">R</span><span class="p">[</span><span class="mi">1</span><span class="err">…</span><span class="n">n2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">n1</span>
</span><span class='line'>        <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">p</span> <span class="o">+</span> <span class="n">I</span> <span class="err">–</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">n2</span>
</span><span class='line'>        <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">[</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">q</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span>
</span><span class='line'>    <span class="n">L</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAX</span>
</span><span class='line'>      <span class="n">R</span><span class="p">[</span><span class="n">n2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAX</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="o">=</span> <span class="n">p</span> <span class="n">to</span> <span class="n">r</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>          <span class="n">A</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">A</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>          <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>排序算法完整的伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">merger</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">r</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="c1">// 取小于(p + r)/2的最大整数</span>
</span><span class='line'>      <span class="n">merger</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
</span><span class='line'>      <span class="n">merger</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>      <span class="n">merger</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>归并排序的最坏，平均时间复杂度均为 O(nlogn)，但是空间复杂度达到了 O(n)。</p>

<hr />

<h4>堆排序</h4>

<p>此处我们用到的为二叉堆。假设我们的堆是存储在数组A中的，那么A.length表示数组中元素的个数，那么A.heap-size则表示有多少个堆元素存储在此数组中。也就是说，虽然A中存满了数据，但是有可能只有 A[1…A.heap-size]存储的是堆的有效元素，这里0 &lt;= A.heap-size &lt;= A.length。堆的根节点为A[1]，这样给的一个节点的下标，我们很容易计算他的父节点，左孩子和右孩子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">parent</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="o">/</span><span class="mi">2</span> <span class="c1">// 取小于(p + r)/2的最大整数</span>
</span><span class='line'>
</span><span class='line'><span class="n">left</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="n">right</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>二叉堆可以分为两种形式：最大堆和最小堆，在这两种堆中，节点的值都要满足堆的性质，在最大堆中，最大堆性质是指除了根节点以为的所有节点，必须满足：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">A</span><span class="p">[</span><span class="n">parent</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span> <span class="o">&gt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在最小堆中，最小堆性质是指除了根节点以为的所有节点，必须满足：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">A</span><span class="p">[</span><span class="n">parent</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>堆排序主要包含以下两个基本过程，一是max-heapify过程：它用来维护最大堆的性质，其实际复杂度为 O(logn)。二是build-max-heap 过程：它主要是从无序的输入数组中构造一个最大堆，具有线性时间复杂度。首先介绍max-heapify 过程，它的输入为一个数组 A和数组下标i ，使用max-heapify过程的时候，我们假定根节点为left[i]和right[i]的二叉树都已经为最大堆了，若此时A[i]有可能小于其孩子节点，这样就违背了最大堆的性质。max-heapify过程通过让A[i]逐级下降，从而使下标i为根节点的子树遵循最大堆的性质。其伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">max</span><span class="o">-</span><span class="n">heapify</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="mi">2</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">szie</span>
</span><span class='line'>      <span class="n">l</span> <span class="o">=</span> <span class="n">left</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">right</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">szie</span> <span class="n">and</span> <span class="n">A</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>          <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">szie</span> <span class="n">and</span> <span class="n">A</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">largest</span> <span class="o">!=</span> <span class="n">i</span>
</span><span class='line'>            <span class="n">swap</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="n">largest</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以用自底向上的方法利用max-heapify把一个大小为n=A.length的数组A[1…n]转换为最大堆。对于数组A，我们可以知道A((n/2)+1…n)中的元素都为此二叉树的叶节点。每个元素都可以看成只包含一个元素的堆。build-max-heap过程则对树中的其它节点都调用一次max-heapify。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">build</span><span class="o">-</span><span class="n">max</span><span class="o">-</span><span class="n">heap</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'>  <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">length</span><span class="o">/</span><span class="mi">2</span> <span class="n">downto</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">max</span><span class="o">-</span><span class="n">heapify</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始时候，堆排序算法利用build-max-heap将输入数组A建成最大堆，其中n=A.length。因为数组中的最大元素总在根节点A[1]中，通过它与A[n]进行交换，便可将此元素放到正确的位置。如此我们可得堆排序的算法伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">heap</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'>  <span class="n">build</span><span class="o">-</span><span class="n">max</span><span class="o">-</span><span class="n">heap</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">length</span> <span class="n">downto</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">swap</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
</span><span class='line'>        <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">heap</span><span class="o">-</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">max</span><span class="o">-</span><span class="n">heapify</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>快速排序</h4>

<p>与归并排序一样，快速排序也使用了分治思想。算法的关键部分是下面的partition过程，如下面的伪代码所示，它将数组A[p…r]分为两个(可能为空)子数组A[p…q-1] 和A[q+1…r]，使得A[p…q-1]中的每一个元素都小于等于A[q]，使得A[q+1…r]中的每一个元素都大于或等于A[q]。partition的伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">partition</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">p</span> <span class="err">–</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="n">p</span> <span class="n">to</span> <span class="n">r</span> <span class="err">–</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">x</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">r</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>下图展示了partition过程如何在一个有8个元素的数组的进行操作的过程，它总是选择一个元素x=A[r]作为主元，并围绕它来划分数组，如下图所示，(1)代表最初的数组，(2)代表partition过程j执行到第6个元素处时数组的形状。(3)代表这一次partition过程执行完成之后数组的状态。从这个partition过程很容易看出，在整个执行的过程中，partition维护了四个区域，A[p…i]区间里的所有值都小于或者等于x，A[i+1…j-1]区间里所有的值都大于x，A[r]=x，而区间A[j…r-1]中的值则还未进行划分。而快速排序partition过此执行完成之后，整个数组A以主元A[r]分成两部分，区间A[p…q-1]所有的元素小于或者等于A[r], 区间A[q+1…r]所有的元素大于A[r]。<br/>
<img src=/images/quick-sort.jpg title="quick-sort"><br/>
整个快速排序算法的伪代码如下所示 ,快速排序的时间复杂度依赖于划分是否平衡，如果划分不平衡，例如按照上面的partition过程，如果对于有序的数组，时间复杂度就最差，为O(n2)，如果划分比较平衡的话，时间复杂度就为O(nlogn)，快速排序的平均时间复杂度也为O(nlogn)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">quick</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">r</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quick</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quick</span><span class="o">-</span><span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>至此介绍了四种排序算法最基本的内容，排序算法还有一个稳定性问题，可参考<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">这里</a>。上面的排序算法，选择和合并排序是稳定的，堆排序和快速排序不稳定。在实际应用中，当需要涉及到排序算法时，也许应用不仅仅是简单套用这些基本的内容那么简单，下篇将基于这些排序算法深入介绍一些有意思的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[梦一场]]></title>
    <link href="http://ywllx.github.com/blog/2013/07/01/its-a-dream/"/>
    <updated>2013-07-01T00:51:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/07/01/its-a-dream</id>
    <content type="html"><![CDATA[<h4>First</h4>

<p>今天应该说是昨天去见了一位女生，一位第一眼感觉很好的女生。不过她十分对我不感兴趣，其实这也许该怪自己，因为我往往在陌生的自己喜欢的女生面前显的很无趣。还好有另外一位朋友在，她是一位很健谈的人，讲了很多有意思的事情。在见面之前，做了一件自己以前肯定不会做很丢人的事情，这个以后再如果可以的话再提了。见面之后，下地铁坐公交的时候，可郁闷了。本来去那个公交站有19和101路，结果回来的时候，我下地铁上公交站的时候，费了九牛二虎之力辨认到开始坐19路下车站的另一边，突然来了一辆101，我赶紧准备上车，问司机却说我坐反了，要到对面。我又穿越地铁跑到对面，搜了下公交车站的指示牌，发现101车到我要的目的站要好多站，而19路却少的很多，两个竟然不是同一路线，当然选站少的车做了，又赶紧跑到对面，此时又来了一辆101，反正是坐不了，公交站指示牌上搜19路车，却怎么也搜不到，郁闷啊，难道这里没有回去的19路，手机上网一搜，还真没。Oh，XX！我只好又跑到对面去了，那地铁门口摆摩的的一人都诧异地望着我了，要是地铁有警察叔叔，会不会怀疑我做恐怖活动呢。</p>

<!--more-->


<br/>


<p>总之今天应该说昨天我很不幸，not my lucky day！回住的地方，身边一直放着手机，看着电视，总想对自己说点什么，往往人郁闷的时候，就会想一些事情。</p>

<br/>


<p>其实有些事情真的很简单，可我们自己往往搞得很复杂，想的太多，到底是出于什么心理呢？怕自己出错，怕丢面子。自己想说一句话，想着说出去会不会显得自己很二，很无知，因此不敢说。自己想做的事情，想着万一做了失败了，那些盯着你看的人眼光会怎么样啊，因此缩手缩脚，或者干脆找个借口说自己不愿或者不能去做。到最后却发现自己越来越无趣，越来越孤单。我们很喜欢单纯，却把自己搞得越来越复杂，而且还冷眼冷风那些人家简单的言语，简单的举动。</p>

<br/>


<p>然而有时却真的在想，是不是这个社会原本就很复杂了，也许以前所接触的人就在这个小山村，而现在已辗转了几个几千万人的大城市。以前跟家人耕着一亩三分地，而现在却周围充满着各种身份的同事。人生依然不过百，可能见能听的范围和事情跟过去比起来，何止多了几百倍。也许复杂不是错，只是因为我们处在这个时代。但我觉得我们内心应该坚持一些简单，尤其是面对自己最亲近喜欢的人，如果还抱着复杂的目的和心理去做，这是悲哀的，真正的不值得。</p>

<br/>


<p>谈到简单，让我不得不想起我非常喜欢的一部电影《阿甘正传》和一部电视剧《士兵突击》。我一直觉得那个阿甘和许三多是简单的人把简单的事情做到极致的人，却做出了不简单的结果。我印象中好像有哪位科学家说过上帝最终的真理应该是简单统一的，也许真是如此，因为上帝似乎最垂青的是那些坚持简简单单做好一件事的人，就像电影里的阿甘。追求太多，也许会让你不堪重负，感到的是痛苦，也许会让你迷失方向，走向歧途，最后带来伤害。也许真正碰到了我们喜欢的，就应该简简单单地现在就去做，坚持下去，不必想着那么多的得失。</p>

<br/>


<p>再提一下我看的电视，偶尔看到了湖南卫士的《快乐男生》，其实我以前对这个节目很不齿的。但是看到里面一位女人街卖女鞋晋级的男生和第四位演唱《梦一场》晋级的男生，觉得其实真没绝对的好和坏，也许只是因为你恰好没发现，也许只是因为你一开始就抱着那种成见永不去接受它。有些东西是因为它合理而存在的。</p>

<br/>


<p>今天，昨天not my lucky day？ NO! 它让我在这个时间见到了一位感觉很好，很喜欢的女生！</p>

<br/>


<h4>Second</h4>

<p>很早以前搭建我的博客的时候，博客的名字就叫做《其实很简单 思考是一种美德 坚持是一种行动》。上篇文章似乎只提到了简单和坚持，注定还要我写下下面的文字吧。因为我的那个故事也还在继续，那位女生今天发给我的一个信息我给误会了，当时简单地就回复了不该说的话过去，而且还比较激动向那位朋友问道，我当天那么差劲啊？晚上的时候一直在思考这事，觉得我可能再怎么也不该激动“咨询”那位朋友的，很不该！后来很晚收到那位女生的回信息，Oh，XX！我误会了那句话，该死的上下文，不过事情似乎已经这样，再后悔也没用，先赶紧向我那位好心的朋友道歉吧！</p>

<br/>


<p>唉，这里不想说今天是不是我的lucky day了！其实觉得我当时看到那条消息，应该先多多思考下的，你眼中觉得很好的女生应该不会表达这样的意思的！亏我前一向还在开玩笑地跟某某说冲动是魔鬼。许久以前，也许是小孩子的时候，我们都是凭着自己的喜好来做事情，喜欢什么，就吵着想要得到，讨厌什么，反正觉得它一点不好，什么都不对。但小孩子的时候，我们毕竟是单纯的，恐怕脑子中不会有什么利益的词汇，此时的喜好恐怕也不会伤及大雅。现在的我们，无论生活工作，如果碰到顺心的事情，相信大家都很乐意去做，但碰到的事情和言语让你觉得很不爽无语时，也许应该先站在对方的角度思考下，而不是先想着对方怎么错了，我该如何回击。这样是否会让心境更开阔些，减少那些不必要的误会和痛苦，也许不会错过那些本该属于你的东西，比如友情和机会&#8230;看来，孔子几千年前说的三思而后行，到现在还留下来了，毕竟是有用的啊！</p>

<br/>


<p>今晚还是不小心打开了电视，再次偶尔调到了湖南卫视台，发现正好又在重播那个《快乐男生》节目，那位在酒吧端盘子，洗盘子的那位歌手唱《梦一场》的情节。难道这世上还真有缘分那件事，这篇文章的题目注定就是这个了！</p>

<br/>


<p>lucky day？视缘分而定吧！其实很简单，思考是一种美德，坚持是一种行动！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python文本处理]]></title>
    <link href="http://ywllx.github.com/blog/2013/06/28/python-text-processing/"/>
    <updated>2013-06-28T11:45:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/06/28/python-text-processing</id>
    <content type="html"><![CDATA[<p>对于脚本语言来说，文本处理任务构成了一个很重要的组成部分。python提供用于文本处理最主要的工具就是字符串——不可改变的字符序列。python提供了很多基于字符串的基本处理方法，掌握这些方法对于处理文本是十分用于的，这里不再详述。我这里主要是总结《python cookbook》中关于文本处理的几个例子一些内容形成的一个博客。</p>

<!--more-->


<hr />

<h4>每次处理一个字符</h4>

<p>在例子1中，文章提到了如何处理字符串中每个字符的四种基本方法。python实际上并没有一个特别的类型来对应“字符”以区别字符串,要做到每次处理一个字符的方式处理字符串。可以调用内建的<code>list</code>，用字符串作为参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">thelist</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">thestring</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者用<code>for</code>语句对该字符串进行循环遍历：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">thestring</span><span class="p">:</span>
</span><span class='line'>  <span class="n">do_something_with</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面可以换成以下用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">do_something_with</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">thestring</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者用内建的<code>map</code>函数，每次取得一个字符就调用一次处理函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">do_something</span><span class="p">,</span> <span class="n">thestring</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>测试一个对象是否为字符串</h4>

<p>在python cookbook中提到，许多程序员遇到这个问题的第一反应是采用如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">isExactlyAString</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>书中说到这个方法不太好，很多Unicode对象无法通过这个测试，用户自己编写的str的子类也不行，我尝试了下，发现中文字符串还是可以通过这个测试的。书中提到的首先的解决方案是采用如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">isAstring</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但书中接着提到这个方案也有不足，对于python标准库中提到的UserString的模块提供的UserString实例也无能为力，因为它不是从basestring派生的。想检查一个对象行为是否真的像字符串那样，可以采取如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">isStringLike</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span> <span class="n">obj</span> <span class="o">+</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="n">excpet</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="n">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>它实用于str，unicode和Usertring，但是比较复杂而且运行比较慢。
这个方法仍有可能不满足的地方，如是作者提到了一个所谓的鸭子判断法：如果它走路像鸭子，而且叫声也像鸭子，那么对于我们的应用而言，便可以认为这个东西就是鸭子。这个方法蛮有意思的，倒有点像做测试，如果我所列出的一大堆测试都过了，那么便可以认为这个程序基本就正确了，可以用了，当然很有可能它还有我们没发现的bug。</p>

<hr />

<h4>合并字符串</h4>

<p>python中如果要把一些小的字符串合并成一个大的字符串，可以使用字符串操作符join，当然我们也可以使用&#8217;+&#8217;操作符也能够将字符串拼接起来，假如pieces是一个字符串列表，那么可以使用以上两种方式进行拼接。
在python中，字符串对象是无法改变的。任何对字符串的操作，包括字符串的拼接，都将产生一个新的字符串对象，而不是修改原有的对象。因此拼接N个字符串将涉及到创建并丢弃N-1个中间结果。当一个序列中包含了很多小的字符串的时候，性能就不得不考虑。在内部使用了 + 或者 += 的循环所需的时间跟需要累加的字符数的平方成正比，因为分配并填充一个大字符串的时间大致正比如该字符串的长度。但是如果我们使用join方法，传入一个字符串序列作为参数，它将返回一个由字符串序列所有子项字符串拼接而成的大字符串，而且这个过程只使用了一个拷贝用于串接所有子项，性能将会得到大大提高。下面是两种实现方法一个简单测试例子，最后执行时间可以看出两者性能差距是很大的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p"></span><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test1</span><span class="p">(</span><span class="n">pieces</span><span class="p">):</span>
</span><span class='line'>    <span class="n">largeString</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">piece</span> <span class="ow">in</span> <span class="n">pieces</span><span class="p">:</span>
</span><span class='line'>        <span class="n">largeString</span> <span class="o">+=</span> <span class="n">piece</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test2</span><span class="p">(</span><span class="n">pieces</span><span class="p">):</span>
</span><span class='line'>    <span class="n">largeString</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">pieces</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">strings1</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">str</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'><span class="n">strings2</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">str</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">Timer</span>
</span><span class='line'>    <span class="n">t1</span><span class="o">=</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test1(strings1)&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test1, strings1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t2</span><span class="o">=</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test2(strings1)&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test2, strings1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t3</span><span class="o">=</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test1(strings2)&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test1, strings2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t4</span><span class="o">=</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test2(strings2)&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test2, strings2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">t1</span><span class="o">.</span><span class="n">timeit</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">t2</span><span class="o">.</span><span class="n">timeit</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">t3</span><span class="o">.</span><span class="n">timeit</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">t4</span><span class="o">.</span><span class="n">timeit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码在ubnutu 12.10, python 2.7, CPU为Intel Core P8700环境下执行结果如下：<br/>
8.47422218323<br/>
2.06159615517<br/>
18.8844971657<br/>
4.24623513222<br/></p>

<hr />

<h4>过滤字符串</h4>

<p>给定一个需要保留的字符的集合，构建一个过滤函数，并可将其应用于任何字符串s，函数返回一个s的拷贝，该拷贝只包含指定字符集合中的元素，对于此类问题，不得不提到string对象的下面两个方法：
string.maketrans(from, to)：Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.</p>

<p>string.translate(s, table[, deletechars])：Delete all characters from s that are in deletechars (if present), and then translate the characters using table, which must be a 256-character string giving the translation for each character value, indexed by its ordinal. If table is None, then only the character deletion step is performed.</p>

<p>当以string.maketrans(&#8221;, &#8221;)方法调用maketrans时，翻译表正好是有256个字符的字符串t。翻译表生成的字符串（忽略不可打印字符）为“!&#8221;#$%&&#8217;()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~”，本质上与ASCII表相对应.</p>
<p>其实调用maketrans函数时，已经完成了转换。例如string.maketrans(&#8216;ABCD&#8217;, &#8216;abcd&#8217;),调用完成后，翻译表生成的包含256个字符的字符串（忽略不可打印字符）为“!&#8221;#$%&&#8217;()*+,-./0123456789:;<=>?@abcdEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~”，该翻译表中的原“ABCD”的位置已被“abcd”替换。</p>
当你把t作为第一个参数传入translate方法时，原字符串中的每一个字符c，在处理完成后都会被翻译成字符t[ord(c)]
而对于translate()简单来说,就是对字符串S移除deletechars包含的字符，然后保留下来的字符按照table里面的字符映射关系映射,这个table必须是a 256-character string giving the translation for each character value, indexed by its ordinal. 这个table正好可以用上面提到的maketrans()生成。
举个例子也许更有说服力：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p"></span><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="n">table1</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">maketrans</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">table2</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">maketrans</span><span class="p">(</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span> <span class="s">&#39;ABCDE&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">table1</span>
</span><span class='line'><span class="k">print</span> <span class="n">table2</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;abcdef-123456&#39;</span>
</span><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table1</span><span class="p">)</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table2</span><span class="p">)</span>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table1</span><span class="p">,</span> <span class="s">&#39;abc123&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s4</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table2</span><span class="p">,</span> <span class="s">&#39;abc123&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s1</span>
</span><span class='line'><span class="k">print</span> <span class="n">s2</span>
</span><span class='line'><span class="k">print</span> <span class="n">s3</span>
</span><span class='line'><span class="k">print</span> <span class="n">s4</span>
</span></code></pre></td></tr></table></div></figure>
&#8212;
table1与table2不同的地方就在于翻译表中的原“abcde”的位置已被“ABCDE”替换；<br/>
s1,s2,s3,s4打印如下：<br/>
abcdef-123456<br/>
ABCDEf-123456<br/>
def-456<br/>
DEf-456<br/>
s1 = s.translate(table1)           #没做任何变化，输出原字符串<br/>
s2 = s.translate(table2)           #输出ABCDEf-123456 就是将abcd映射为大写的ABCD<br/>
s3 = s.translate(table1, &#8216;abc123&#8217;) #输出def-456， 则是删除了s中的字符abc123<br/>
s4 = s.translate(table2, &#8216;abc123&#8217;) #先把s中的abc123去除了，然后在保留下来的字符中应用table中指定的字符映射关系映射：de -> DE<br/>
还有此方法在python3中好像有变动，具体参考相关python文档了。<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 指针总结]]></title>
    <link href="http://ywllx.github.com/blog/2013/06/25/c-pointer/"/>
    <updated>2013-06-25T23:43:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/06/25/c-pointer</id>
    <content type="html"><![CDATA[<p>好久没更新过博客了，只能怪自己实在是懒，以后打算最好每星期能更新一次博客，写点自己学的东西，这次就想写点C指针的问题。关于这个，网上有个很详细的文章，叫做<a href="http://ishare.iask.sina.com.cn/f/12454328.html">C语言指针详解</a>。而我写这个，主要是看了一本书《算法精解—C语言描述》，里面第2章是专门讲C指针的，我觉得不错，摘了些我觉得有意思的内容。</p>

<!--more-->


<hr />

<h4>指针基础</h4>

<p>一个指针其实就是一个变量，它存储的是数据在内存中的地址而不是存储数据本身。C语言指针详解提到要搞清一个指针需要搞清指针的四方面的内容:指针的类型,指针所指向的类型,指针的值或者叫指针所指向的内存区,还有指针本身所占据的内存区，并且做了大量示例介绍，大家可以去看看。在C 语言中，指针能够指向一个无效的地址，这样的指针被称作悬空指针。可能产生悬空指针的一些编程错误包括：将任意的整型变量强制转换为指针变量；操作超出数组边界的指针；释放一个或多个仍在被引用的指针。</p>

<hr />

<h4>存储空间分配</h4>

<p>当在C中声明一个指针时，一定量的存储空间会分配个这个指针。这里提的存储空间就如前面提的，我们把它分为：指针的值或者叫指针所指向的内存区,以及指针本身所占据的内存区。当声明一个指针时，仅仅只是为指针本身分配了空间，并没有为指针引用的数据分配空间。而数据分配空间一般有两种方法：一种是直接声明一个变量，另一种是在运行时动态分配存储空间（例如：使用malloc或realloc）
当声明一个变量时，此变量所需的存储空间一般由系统自动管理，需要注意的是有些变量的存储空间不会在程序的整个生命周期中永久存在。例如一些变量，暂且称为自由变量，在进入或者离开一个模块或函数时其存储空间由系统自动分配和释放。例如在下面的函数<code>f</code>中，<code>iptr</code>的赋值为变量<code>a</code>的地址，当函数<code>f</code>返回时，<code>iptr</code>会变成一个悬空指针，因为当函数返回时，变量<code>a</code>已经从栈中弹出释放了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="n">iptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而当动态分配存储空间时，我们会得到一个指向存储空间的指针。此存储空间由我们自行管理，会一直存在，除非我们显式将其释放。例如下面这个函数中<code>malloc</code>分配的存储空间会一直有效直到我们调用<code>free</code>函数将其释放掉。所以，当函数<code>g</code>返回时此存储空间仍然有效。参数<code>iptr</code>是一个指向我们想要改变其内容的对象的指针（此对象也是一个指针），所以当<code>g</code>返回时，<code>iptr</code>指向由<code>malloc</code>申请的地址空间。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">g</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="n">iptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">iptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于二级指针作为参数的问题，我们还可以看下面这个可以实际运行的例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>  <span class="nf">test</span><span class="p">(</span><span class="kt">char</span>  <span class="o">**</span><span class="n">p</span><span class="p">,</span>  <span class="kt">int</span>  <span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">p</span>  <span class="o">=</span>  <span class="p">(</span><span class="kt">char</span>  <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span>  <span class="o">*</span>  <span class="n">num</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span>  <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>  <span class="o">*</span><span class="n">str</span>  <span class="o">=</span>  <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">test</span><span class="p">(</span><span class="o">&amp;</span><span class="n">str</span><span class="p">,</span>  <span class="mi">100</span><span class="p">);</span>      <span class="c1">//注意参数是&amp;str，而不是str  </span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span>  <span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面这个程序中，传进函数<code>test</code>是指针<code>str</code>的地址值，可以认为这个值是指向指针<code>str</code>的指针，这个值在程序运行过程中，是存放在栈结构中的，<code>test</code>函数返回之后，会自动将其释放掉。但是调用<code>test</code>函数之后，改变了这个值指向的内存的值，即<code>str</code>的值，也就是说改变了指针<code>str</code>的值，使其指向了我们在堆中申请的内存，这个变量是属于<code>main</code>函数的，这样我们就可以改变<code>str</code>指针指向的值。这是把二级指针作为参数传递给函数一个很重要的地方。</p>

<p>在下面这个简图中，左边代表：<code>main</code>函数调用<code>test</code>函数在分配内存之前指针的示意图，中间代表：执行<code>test</code>函数，动态分配内存时，与<code>str</code>相关的指针情况，此时<code>str</code>的值被改变，指向堆中的存储字符串“hello”的内存；右边代表：<code>test</code>函数返回时, <code>test</code>关联的栈销毁之后，<code>&amp;str</code>释放，此时与<code>main</code>函数中的<code>str</code>仍然保持指向堆中的内存。传值调用建立参数的一份拷贝并把它传给调用的函数，在调用函数中修改参数值的拷贝不影响原始的变量值；传引用调用允许调用函数修改原始变量的值。
<img src=/images/cpointer.jpeg title="C pointer"></p>

<h4>作为函数参数的指针</h4>

<p>在C语言的函数调用中指针起着至关重要的作用，指针可以支持将参数作为引用传递给函数（即按引用调用）。其实说到函数参数传递，就不得不提到按值传递和按引用传递。一般大家都会这么说两者的区别：传值调用建立参数的一份拷贝并把它传给调用的函数，在调用函数中修改参数值的拷贝不影响原始的变量值；传引用调用允许调用函数修改原始变量的值。
在形式上，C语言只支持按值来传递参数。在按值调用传递参数的过程中，函数参数的一份拷贝（私有副本）将会用到函数的执行体中，此函数调用过程中，会对此份拷贝进行操作，调用完成之后，拷贝会被释放，因此不改变原始的变量值。然而，我们可以模仿按引用调用传递参数将一个指向参数的指针（而不是参数本身）传递给函数，这样函数调用者就可以得到一个指针的私有副本用于函数体的执行过程，调用函数在执行的过程中对指针指向的变量的操作就是对原有变量的操作，因此当此函数调用完成之后，此指针释放掉，但是对此指针指向的值的改变仍然有效，即改变了原始变量的值。如果我们在函数调用中想改变某个指针的值，那么便可以向函数传递一个带改变的指向指针的指针，即二级指针。这个实际在上一节的例子中已有所表现，不再详述。</p>

<h4>泛型指针void</h4>

<p>通常情况下，C只允许相同类型的指针之间进行转换。例如：一个字符型指针sptr（一个字符串）和一个整型指针，我们不允许把sptr转换为iptr或把iptr转换为sptr。但是泛型指针能转换为任何类型的指针，反之亦然。在C语言中，通常声明一个void指针来表示泛型指针。
很多情况下，void指针是十分有用的。比如对于一个交换函数，可以把函数参数改为void指针，如下所示：</p>

<pre><code>int swap（void *x, void *y, ...) 
</code></pre>

<p>这样就可以把交换函数变成一个可以交换任何类型数据的通用交换函数，有点类似于C++中的多态了，我还记得好像有这方面的面试题。</p>

<h4>函数指针</h4>

<p>函数指针是指向可执行代码段或调用可执行代码段的信息块的指针，而不是指向某种数据的指针。函数指针将函数当作普通数据那样存储和管理。函数指针有一种固定的形式，就是包含一个确定的返回值类型和若干个函数参数。声明一个函数指针看起来与声明一个函数非常类似，只是在函数名之前有一个表示指针的星号（*），并且函数名和星号会用圆括号括起来。例如在下面的一段代码中，match会被声明为一个函数指针，它接受两个void指针类型的参数，同时返回一个整型。</p>

<pre><code>int (*match)(void *a, void *b);
</code></pre>

<p>假如有一个match_int函数，它的两个void指针参数指向整型并返回1，考虑到之前的函数声明match，可以这样赋值：</p>

<pre><code>match = match_int；
</code></pre>

<p>要执行一个由函数指针所引用的函数，只需要在正常调用普通函数的地方调用函数指针。例如要调用之前提到的函数match，指向下面的语句，建设x，y和retval都已声明为整型：</p>

<pre><code>retval = match(&amp;x, &amp;y);
</code></pre>

<h4>写在最后</h4>

<p>总之C语言的指针对于C程序员来说，让人又爱又恨，对于初学者来说，有时真的特别迷惑，这里简单地参考《算法精解-C语言描述》这本书，提到了几个指针的一些应用和技术，最主要也是为了使自己能对指针有个更加透彻的了解，希望能对学C语言的同学有点参考吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用octopress在github构建自己的博客]]></title>
    <link href="http://ywllx.github.com/blog/2013/03/11/how-to-build-blog-with-octopress-on-github/"/>
    <updated>2013-03-11T22:26:00-07:00</updated>
    <id>http://ywllx.github.com/blog/2013/03/11/how-to-build-blog-with-octopress-on-github</id>
    <content type="html"><![CDATA[<p>早就想着自己动手利用github搭建一个能自己控制的博客，上个周末，终于把想法变成行动了，google了一把之后，打开了<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">一篇文章</a>，介绍如何利用github Pages和Jekyll搭建一个免费的，无限流量的Blog，这不正是我所需要的吗！但是对jekll并不熟，文章也没有详细介绍如何利用它。继续google，发现了octopress这个工具，而且网上对介绍如何利用它搭建博客的文章很多，于是参考这些文章，开始搭建自己的博客了。下面则主要是这个过程的一个简单记录。</p>

<!--more-->


<hr />

<h4>一些准备</h4>

<p>搭建博客主要用到了下面这些技术和工具，首先对它们进行一些简单的介绍：</p>

<ul>
<li><a href="http://pages.github.com/">Github</a>：GitHub 是一个用于使用Git版本控制系统项目的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。GitHub同时提供付费账户和为开源项目提供的免费账户。Git是一个分布式的版本控制系统，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功。有人把github比作程序员中的facebook，在上面，我们可以很容易构建自己的开源项目。
这里搭建博客主要用到了了Github的Pages功能，它允许用户自定义项目首页。github Pages可以被认为是用户编写的、托管在github上的静态网页，而且它还支持域名绑定。Github Pages同时提供了模板功能，采用的解析引擎是Jekyll。</li>
<li><a href="http://jekyllrb.com/">Jekyll</a>: Jekyll是一个简单的免费的Blog生成工具，它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，不需要数据库，文章可以使用Markdown、HTML、Textile格式的文件保存。Jekyll只是一个生成静态网页的工具，可以配合第三方服务，例如disqus。而且jekyll可以免费部署在Github上，可以绑定自己的域名。</li>
<li><a href="http://octopress.org/">Octopress</a>：Octopress是由Brandon Mathis设计的针对Jekyll的框架，使用Jekyll你可以DIY你个人博客的每一部分,但是你可能就得自己编写自己的HTML模板，CSS，javascript脚本。这对于大多数人来说可能还是太复杂繁琐，那么你可以使用Octopress，它有一系列便捷的命令负责生成、预览、发布、新建文章、新建页面等等，有本地预览功能，有一套还算美观的模版，这个模板修改起来还是很方便的，网站源码和静态页面分离。可以在git以不同分支管理。这样你便可以轻松搭建一个自己的博客。</li>
<li><a href="http://zh.wikipedia.org/wiki/Markdown">Markdown</a>：Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档， 然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 Github的README.md文件就是用Markdown格式写的。在这里了解<a href="http://wowubuntu.com/markdown/#p">Markdown基本语法</a>，简单学习你就可以使用它写博客了。</li>
</ul>


<hr />

<h4>如何搭建</h4>

<p>知道搭建博客主要用到的工具后，搭建一个基本的博客就很简单了，<a href="http://xuhehuan.com/783.html">这篇文章</a>则详细介绍了在windows环境下搭建博客的详细步骤，在linux环境下基本过程也差不多，另外Octopress的<a href="http://octopress.org/docs/">官方文档</a>也有详细的介绍。完成这些操作后你应该得到如下图所示的一个博客。
<img src=/images/version0.JPEG title="初始博客"></p>

<hr />

<h4>个性化设置</h4>

<p>完成上述步骤后，在/octopress目录下，你首先可以执行<code>rake new_post["Title"]</code>命令，这条命令会在source/_post目录下生存一个以日期开头的后缀为.markdown的文件，利用你喜欢的编辑器，按照markdown语法编辑此文件，然后执行<code>rake generate</code>,<code>rake deploy</code>命令就可以生成你的一篇新博客。但凡是使用Octopress搭建的博客，如果不再做修改，那么风格将会是一样的，而且功能单一，下面则将介绍做一些简单的修改，将它进行一点个性化的设置。</p>

<p><em>更改背景颜色与正文字体</em></p>

<p>在Octopress安装完成之后，在sass/custom/下面有一些特殊的文件，根据命名可以猜到它是用来设置你的博客字体，颜色，布局的配置文件，这些配置文件一般会在最后载入。我们将它做一些修改，就可以对你博客的背景色，字体，布局等做出你个性化的设置。这里我参考<a href="http://aijazansari.com/2012/08/27/how-to-customize-octopress-theme/">这个博客</a>修改_colors.scss文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>   <span class="na">background</span><span class="o">:</span> <span class="mh">#d8d8d8</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>   <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>     <span class="na">background</span><span class="o">:</span> <span class="mh">#fff</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>     <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>       <span class="na">background</span><span class="o">:</span> <span class="mh">#fff</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="na">$main-bg</span><span class="o">:</span> <span class="mh">#ffffff</span><span class="nv">!default</span><span class="p">;</span>
</span><span class='line'><span class="na">$page-bg</span><span class="o">:</span> <span class="mh">#ffffff</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">$header-bg</span><span class="o">:</span> <span class="mh">#81BEF7</span><span class="p">;</span>
</span><span class='line'><span class="na">$subtitle-color</span><span class="o">:</span> <span class="nf">lighten</span><span class="p">(</span><span class="nv">$header-bg</span><span class="o">,</span> <span class="mi">58</span><span class="p">);</span>
</span><span class='line'><span class="na">$nav-bg</span><span class="o">:</span> <span class="nf">desaturate</span><span class="p">(</span><span class="nf">lighten</span><span class="p">(</span><span class="mh">#8fc17a</span><span class="o">,</span> <span class="mi">18</span><span class="p">)</span><span class="o">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="na">$nav-bg-front</span><span class="o">:</span> <span class="nf">image-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">noise.png&#39;</span><span class="p">);</span>
</span><span class='line'><span class="na">$nav-bg-back</span><span class="o">:</span> <span class="nf">linear-gradient</span><span class="p">(</span><span class="nf">lighten</span><span class="p">(</span><span class="nv">$nav-bg</span><span class="o">,</span> <span class="mi">8</span><span class="p">)</span><span class="o">,</span> <span class="nv">$nav-bg</span><span class="o">,</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$nav-bg</span><span class="o">,</span> <span class="mi">11</span><span class="p">));</span>
</span><span class='line'><span class="na">$sidebar-bg</span><span class="o">:</span> <span class="nf">desaturate</span><span class="p">(</span><span class="mh">#eceff5</span><span class="o">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="na">$sidebar-link-color</span><span class="o">:</span> <span class="nf">saturate</span><span class="p">(</span><span class="mh">#526f9a</span><span class="o">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="na">$sidebar-link-color-hover</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="mh">#7ab662</span><span class="o">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="na">$footer-bg</span><span class="o">:</span> <span class="mh">#ccc</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'><span class="na">$footer-bg-front</span><span class="o">:</span> <span class="nf">image-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">noise.png&#39;</span><span class="p">);</span>
</span><span class='line'><span class="na">$footer-bg-back</span><span class="o">:</span> <span class="nf">linear-gradient</span><span class="p">(</span><span class="nf">lighten</span><span class="p">(</span><span class="nv">$footer-bg</span><span class="o">,</span> <span class="mi">8</span><span class="p">)</span><span class="o">,</span> <span class="nv">$footer-bg</span><span class="o">,</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$footer-bg</span><span class="o">,</span> <span class="mi">11</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考<a href="http://melandri.net/2012/02/14/octopress-theme-customization/">这个博客</a>修改样式配置文件_styles.scss文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">body</span> <span class="p">{</span> <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">body</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span> <span class="na">background-image</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">body</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span> <span class="na">background-image</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* ----- Content ----- */</span>
</span><span class='line'><span class="nn">#content</span> <span class="nc">.blog-index</span> <span class="nt">article</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.8</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nn">#content</span> <span class="nc">.blog-index</span> <span class="nt">article</span> <span class="nt">h1</span><span class="o">,</span> <span class="nn">#content</span> <span class="nc">.blog-index</span> <span class="nt">article</span> <span class="nt">h1</span> <span class="nt">a</span><span class="o">,</span> <span class="nt">article</span> <span class="nt">header</span> <span class="nt">h1</span><span class="o">,</span> <span class="nt">article</span> <span class="nt">header</span> <span class="nt">h1</span> <span class="nt">a</span><span class="p">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="mh">#555555</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span> <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.8</span><span class="kt">em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="nt">span</span><span class="p">{</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="mh">#E0841B</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">article</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">article</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">article</span> <span class="nt">header</span> <span class="nt">h1</span><span class="p">{</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.blog-index</span> <span class="nt">article</span> <span class="nt">h1</span> <span class="nt">a</span><span class="nd">:hover</span><span class="p">{</span> <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">article</span> <span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">text-align</span><span class="nd">:justify</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">margin-bottom</span><span class="nd">:</span> <span class="nt">1em</span><span class="o">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>导航栏修改</em></p>

<p>实际上导航栏，标题等的修改都可通过编辑里/source/_includes/custom的每个文件来更新你的博客，具体可以参考<a href="http://yanping.me/cn/blog/2012/01/07/theming-and-customization/">这篇博客</a>或者<a href="http://octopress.org/docs/">官方文档</a>，这里不再详述，需要注意的一点是每个链接的href都以root_url开始。例如我在/source/_includes/custom/navigation.html增加了如下一行代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;{{ root_url }}/blog/about&quot;</span><span class="o">&gt;</span><span class="err">关于本人</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>则需要在/blog/目录下新建一个about目录，然后下面新建了一个index.html文件，当你点击<code>关于本人</code>这个导航时连接到此html构建的网页。</p>

<p><em>增加分享和评论</em></p>

<p>是否希望自己的博客能被大家分享呢，或者希望能够和自己博客的读者有所互动，Octopress本身是默认带有国外facebook，twitter的分享功能的插件的，而且也带有Disqus评论功能插件，但一则因为墙的原因，二则为了真正地接地气，我们可以自己加入中国本地化的类似功能的插件，首先在/source/_includes/post目录下修改sharing.html文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="p">{</span><span class="err">%</span> <span class="nt">if</span> <span class="nt">site</span><span class="nc">.share_and_comment</span> <span class="err">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="err">%</span> <span class="nt">include</span> <span class="nt">post</span><span class="o">/</span><span class="nt">share_and_comment</span><span class="nc">.html</span> <span class="err">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="err">%</span> <span class="nt">endif</span> <span class="err">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后到<a href="http://www.jiathis.com/">加网</a>和<a href="http://www.uyan.cc/">友言</a>分别获得分享代码和评论代码（如下），放入新建的share_and_comment.html的文件中，将此文件存放在/source/_includes/post目录下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- JiaThis Button BEGIN --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;jiathis_style_24x24&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_qzone&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_tsina&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_tqq&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_renren&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_kaixin001&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.jiathis.com/share&quot;</span> <span class="na">class=</span><span class="s">&quot;jiathis jiathis_txt jtico jtico_jiathis&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_counter_style&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v3.jiathis.com/code/jia.js?uid=1357227497148830&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- JiaThis Button END --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- UY BEGIN --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;uyan_frame&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">id=</span><span class="s">&quot;UYScript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v1.uyan.cc/js/iframe.js?UYUserId=0&quot;</span> <span class="na">async=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- UY END --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后修改_config.yml文件，设置share_and_comment为true，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>share_and_comment: true
</span></code></pre></td></tr></table></div></figure>


<p><em>增加文章分类标签</em></p>

<p>我们利用rake new_post[&#8220;Title&#8221;]`命令生成一个新的博客markdown文件之后，一般来说开头会默认包含以下几行代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>layout: post
</span><span class='line'>title: &quot;利用octopress在github构建自己的博客&quot;
</span><span class='line'>date: 2013-03-11 22:26
</span><span class='line'>comments: true
</span><span class='line'>categories: octopress github
</span></code></pre></td></tr></table></div></figure>


<p>其中categories便是你对这篇文章的分类标签，如何利用这些标签，找到我们想看的文章，便可以利用以下插件实现，具体参考的博客文章我一时找不到了，对原作者先表示抱歉。首先在plugins新建一个ruby文件category_list_tag.rb，增加一下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>      <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>        <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>        <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/-{2,}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_list&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在source/_includes/asides/目录下新建category_list.html文件，增加以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>文章分类<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% category_list %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在_config.yml中增加相关设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_asides</span><span class="p">:</span> <span class="o">[</span><span class="n">asides</span><span class="o">/</span><span class="n">recent_posts</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">category_list</span><span class="o">.</span><span class="n">html</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>侧栏增加微博秀</em></p>

<ol>
<li>首先到先到<a href="http://weibo.com/tool/weiboshow">微博秀</a>里面生成自己的微博秀嵌入代码，找出最后的uid和verifier</li>
<li>新建一个weiboxiu.html放置到source/_includes/asides下</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;weibo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    (此处拷入微博秀生成的html代码）
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
3. 在_config.yml中增加相关设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_asides</span><span class="p">:</span> <span class="o">[</span><span class="n">asides</span><span class="o">/</span><span class="n">recent_posts</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">category_list</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">weiboxiu</span><span class="o">.</span><span class="n">html</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>结束感言</h4>

<p>首先介绍一个困惑我许久的问题，那就是我想在文中展示以{%或{{开头，%}或}} 结尾的代码时，会被直接解析，最后终于找到了<a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags">解决办法</a>,那就是在其前面加入代码:{% raw %}，后面加入配对的部分{% endraw %}。</p>

<p>再介绍一个实用的方法，那就是当你想删掉某篇博客时，应该采用<a href="http://wywon.com/blog/2012/07/08/octopress-github/">这篇文章</a>介绍的方法，首先删除相应的markdown文件，然后把source分支里相应的文件也删除，可以使用下面命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">-</span><span class="n">u</span>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;delete post&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，我的第一篇博客算完成了，花的时间几乎跟搭建这个博客花的时间一样多，深深感叹，要想像黑客一样玩酷写博客可真不容易啊，真是辛苦。。。熬了几个晚上。。。</p>
]]></content>
  </entry>
  
</feed>
